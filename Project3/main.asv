clear; clc; close all;

% 
% Given values 
% 

tspan = [0, 3000]/10;
x0 = [2; 0];
p = [0.05; 4; 0.2; -0.5; 10; pi/2];


% Initial conditions
phi0 = eye(2);
psi0 = zeros(2, 6);
y0 = [x0(:); phi0(:); psi0(:)];

% Integrating ODE
opts = odeset('RelTol', 1E-9, 'AbsTol',1E-9);
func = @(t, y) xdot(t, y, p);
[t, x] = ode45(func, tspan, x0, opts);

func = @(t, y) dynamics(t, y, p);
[t, sol] = ode45(func, t, y0, opts);

xLp =

figure
plot(t, sol(:, 1)-x(:, 1))
%% Function Definitions
function f = xdot(t, x, p)
    f = [x(2);
        -p(1)*x(2) - p(2)*x(1) - p(3)*x(1)^2 - p(4)*sin(p(5)*t+p(6))];
end

function f = dynamics(t, y, p)
    
    % Extract x, Phi, Psi
    x = y(1:2);
    phi = reshape(y(3:6), 2, 2);
    psi = reshape(y(7:end), 2, 6);

    % Partial Derivatives
    A = [0, 1; -p(2)-3*p(3)*x(1)^2, -p(1)];
    dfdp = [zeros(1, 6); -x(2), -x(1), -x(1)^3, ...
        -sin(p(5)*t + p(6)), -p(4)*t*cos(p(5)*t + p(6)), -p(4)*cos(p(5)*t + p(6))];

    % State Dynamics
    xdot = [x(2); -p(1)*x(2) - p(2)*x(1) - p(3)*x(1)^2 - p(4)*sin(p(5)*t+p(6))];
    
    % Matrix Derivatives
    phidot = A*phi;
    psidot = A*psi + dfdp;
    
    % Flatten and concatenate derivatives
    f = [xdot(:); phidot(:); psidot(:)];
end
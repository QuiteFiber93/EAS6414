%% Task 1
clc; clear; close all;

% Getting array of times
tspan = (1:3000)/10;

% Initializing given variables
x0 = 2; xdot0 = 0;
state0 = [x0; xdot0];

p1 = 0.05; p2 = 4;
p3 = 0.2; p4 = -0.5;
p5 = 10; p6 = pi/2;
p = [p1; p2; p3; p4; p5; p6];

% Initial Conditions
phi0 = eye(2);
psi0 = zeros(2, 6);
state0 = [state0;phi0(:); psi0(:)];

% Integrating ODE for system and for transition matrices
nlfunc = @(t, state) dynamics_LP(t, state, p);
[t, sol] = ode45(nlfunc, tspan, state0);

% Parsing solution
x = sol(:, 1:2);
phi = zeros(2, 2, length(t));
psi = zeros(2, 6, length(t));

for n = 1:length(t)
    phi(:, :, n) = reshape(sol(n, 3:6), 2, 2);
    psi(:, :, n) = reshape(sol(n, 7:18), 2, 6);
end

subplot(1, 3, 1)
plot(t, x(:, 1))
title('$x(t)$ vs $t$', 'Interpreter', 'latex')
xlabel('$t$', 'Interpreter', 'latex')
ylabel("$x(t)$", 'Interpreter', 'latex')

subplot(1, 3, 2)
plot(t, x(:, 2))
title('$\dot{x}(t)$ vs $t$', 'Interpreter', 'latex')
xlabel('$t$', 'Interpreter', 'latex')
ylabel("$\dot{x}(t)$", 'Interpreter', 'latex')

subplot(1, 3, 3)
plot(x(:, 1), x(:, 2))
title('$\dot{x}(t)$ vs $x(t)$', 'Interpreter', 'latex')
xlabel('$x(t)$', 'Interpreter', 'latex')
ylabel("$\dot{x}(t)$", 'Interpreter', 'latex')

% Validating State Transition Matrix


%% Implementing GLSDC

% Setting seed for repeatability
rng(2025)

% Generating Measurements from Error
sigma = 0.1;
xtilde = x + sigma * randn(size(t))